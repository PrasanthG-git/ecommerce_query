-- 1. Create the database
CREATE DATABASE IF NOT EXISTS ecommerce;

-- 2. Use the newly created database
USE ecommerce;

-- 3. Create customers table
CREATE TABLE IF NOT EXISTS customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    address VARCHAR(255)
);

-- 4. Create orders table
CREATE TABLE IF NOT EXISTS order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT DEFAULT 1,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);


-- 5. Create products table
CREATE TABLE IF NOT EXISTS products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    description TEXT
);

-- 6. Insert sample data into customers table
INSERT INTO customers (name, email, address) VALUES 
('Arun', 'arun@gmail.com', '123 Maple Street'),
('Gokul', 'gokul@gmail.com', '456 Oak Avenue'),
('Chakara', 'chakara@gmail.com', '789 Pine Lane');

-- 7. Insert sample data into products table
INSERT INTO products (name, price, description) VALUES 
('Laptop', 999.99, 'High-performance laptop with 16GB RAM and 512GB SSD'),
('Smartphone', 599.99, 'Latest smartphone with excellent camera and battery life'),
('Headphones', 49.99, 'Wireless headphones with noise cancellation feature');

-- 8. Insert sample data into orders table
INSERT INTO orders (customer_id, order_date, total_amount) VALUES 
(1, '2024-11-01', 1049.98),  -- Alice's order for Laptop and Headphones
(2, '2024-11-02', 599.99),   -- Bob's order for Smartphone
(3, '2024-11-03', 49.99);    -- Charlie's order for Headphones

-- 9. Create the order_items table for normalization
CREATE TABLE IF NOT EXISTS order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT DEFAULT 1,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

-- 10. Insert sample data into order_items table to reflect existing orders
INSERT INTO order_items (order_id, product_id, quantity) VALUES 
(1, 1, 1),  -- Alice ordered 1 Laptop
(1, 3, 1),  -- Alice ordered 1 Headphones
(2, 2, 1),  -- Bob ordered 1 Smartphone
(3, 3, 1);  -- Charlie ordered 1 Headphones


-- Query 1: Retrieve all customers who have placed an order in the last 30 days
SELECT DISTINCT c.id, c.name, c.email, c.address
FROM customers c
JOIN orders o ON c.id = o.customer_id
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;

-- Query 2: Get the total amount of all orders placed by each customer
SELECT c.id AS customer_id, c.name, SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders o ON c.id = o.customer_id
GROUP BY c.id, c.name;

-- Query 3: Update the price of Product C (Headphones) to 45.00
UPDATE products
SET price = 45.00
WHERE name = 'Headphones';

-- Query 4: Add a new column `discount` to the `products` table
ALTER TABLE products
ADD COLUMN discount DECIMAL(5, 2) DEFAULT 0.00;

-- Query 5: Retrieve the top 3 products with the highest price
SELECT id, name, price
FROM products
ORDER BY price DESC
LIMIT 3;

-- Query 6: Join the orders and customers tables to retrieve the customer's name and order date for each order
SELECT c.name AS customer_name, o.order_date
FROM orders o
JOIN customers c ON o.customer_id = c.id;

-- Query 7: Retrieve the orders with a total amount greater than 150.00
SELECT id, customer_id, order_date, total_amount
FROM orders
WHERE total_amount > 150.00;

-- Query 8: Retrieve the average total of all orders
SELECT AVG(total_amount) AS average_order_total
FROM orders;



Explain::
    --1 is used to create the database .

    --2 this query is used to use the database that created.

    --3 this query is used create the customer table.

    --4 this query is used create the order table.

    --5 this query is used create the product table.

    --6 This command inserts three sample customer records into the customers table.

    --7 This command inserts three sample product records into the products table.

    --8 This command inserts three sample orders into the orders table.

    --9 This command re-creates the order_items table, ensuring each order's items are normalized into separate records.

    --10  This command inserts sample records into the order_items table to reflect the items in each order.

    -- Query 1 This query retrieves customers who have placed orders in the last 30 days.

    -- Query 2 This query calculates the total amount spent by each customer.

    -- Query 3 This query updates the price of the Headphones product to 45.00.

    -- Query 4  This query adds a new discount column to the products table.

    -- Query 5 This query retrieves the top 3 products with the highest price.

    -- Query 6 This query joins the orders and customers tables to retrieve the customer's name and order date for each order.

    -- Query 7 This query retrieves orders where the total amount is greater than 150.00.

    -- Query 8 This query calculates the average total of all orders.